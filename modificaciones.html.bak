<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modificar Producto</title>
    <link rel="stylesheet" href="estilos.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Allura&family=Bebas+Neue&family=Hind:wght@300&family=Italianno&family=Montserrat:wght@300&display=swap"
        rel="stylesheet">
    <link
        href="https: //fonts.googleapis.com/css2? family= Allura & family= Bebas+Neue & family= Hind:wght@300 & family= Italianno & family= Montserrat:wght@300 & display=swap"
        rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
        href="https://fonts.googleapis.com/css2?family=Allura&family=Bebas+Neue&family=Hind:wght@300&family=Italianno&family=Montserrat:wght@300&family=Poppins:wght@100&display=swap"
        rel="stylesheet">
</head>

<body>
    <h1>Modificar Productos del Inventario</h1>


    <!-- Contenedor principal que será controlado por Vue.js. Este contenedor tendrá dos formularios. -->
    <div id="app">
        <!-- Primer formulario: Selector de producto. LLama a la función obtenerProducto cuando se envíe el formulario -->
        <form @submit.prevent="obtenerProducto">
            <label for="codigo">Código:</label>
            <input type="text" v-model="codigo" required><br>
            <button type="submit">Modificar Producto</button> <a class="menu" href="index.html">Menu principal</a>
        </form>

        <!-- Segundo formulario: se muestra solo si mostrarDatosProducto es verdadero. Llama a la función guardarCambios -->
        <div v-if="mostrarDatosProducto">
            <h2>Datos del Producto</h2>
            <form @submit.prevent="guardarCambios">
                <label for="modeloModificar">Modelo:</label>
                <input type="text" id="descripcionModificar" v-model="modelo" required><br>

                <label for="cantidadModificar">Cantidad:</label>
                <input type="number" id="cantidadModificar" v-model="cantidad" required><br>

                <label for="precioModificar">Precio:</label>
                <input type="number" step="0.01" id="precioModificar" v-model="precio" required><br>

                <!-- Imagen actual del producto -->
                <!-- <img v-if="imagen_url && !imagenSeleccionada" :src="'https://www.pythonanywhere.com/user/veronicapersano/files/home/veronicapersano/mysite/static/imagenes/' + imagen_url"
                    alt="Imagen del producto" style="max-width: 200px;"> -->

                <!-- Al subir al servidor, deberá utilizarse la siguiente ruta. USUARIO debe ser reemplazado por el nombre de usuario de Pythonanywhere -->
                <img v-if="imagen1_url && !imagen1Seleccionada"
                    :src="'https://www.pythonanywhere.com/user/veronicapersano/files/home/veronicapersano/mysite/static/imagenes/' + imagen1_url"
                    alt="Imagen del producto" style="max-width: 200px;">
                <img v-if="imagen2_url && !imagen2Seleccionada"
                    :src="'https://www.pythonanywhere.com/user/veronicapersano/files/home/veronicapersano/mysite/static/imagenes/' + imagen2_url"
                    alt="Imagen del producto" style="max-width: 200px;">
                <img v-if="imagen3_url && !imagen3Seleccionada"
                    :src="'https://www.pythonanywhere.com/user/veronicapersano/files/home/veronicapersano/mysite/static/imagenes/' + imagen3_url"
                    alt="Imagen del producto" style="max-width: 200px;">

                <!-- Vista previa de la nueva imagen seleccionada -->
                <img v-if="imagen1Seleccionada" :src="imagen1UrlTemp" alt="Vista previa de la nueva imagen"
                    style="max-width: 200px;">

                <img v-if="imagen2Seleccionada" :src="imagen2UrlTemp" alt="Vista previa de la nueva imagen"
                    style="max-width: 200px;">

                <img v-if="imagen3Seleccionada" :src="imagen3UrlTemp" alt="Vista previa de la nueva imagen"
                    style="max-width: 200px;">

                <!-- Input para nueva imagen -->
                <label for="nuevaImagen1">Nueva Imagen1:</label>
                <input type="file" id="nuevaImagen" @change="seleccionarImagen"><br>

                <label for="nuevaImagen2">Nueva Imagen2:</label>
                <input type="file" id="nuevaImagen" @change="seleccionarImagen"><br>

                <label for="nuevaImagen3">Nueva Imagen2:</label>
                <input type="file" id="nuevaImagen" @change="seleccionarImagen"><br>

                <label for="descripcionModificar">Descripción:</label>
                <input type="text" id="descripcionModificar" v-model="descripcion" required><br>

                <label for="estiloModificar">Estilo:</label>
                <input type="text" id="estiloModificar" v-model="estilo" required><br>

                <label for="proveModificar">Proveedor:</label>
                <input type="number" id="proveModificar" v-model="proveedor" required><br>

                <button type="submit">Guardar Cambios</button>
                <a href="modificaciones.html">Cancelar</a>
            </form>
        </div>
    </div>

    <!-- <script src="http://127.0.0.1:5000/"></script> -->
    <script>
        //const URL = "http://veronicapersano.pythonanywhere.com/"

        //Al subir al servidor, deberá utilizarse la siguiente ruta. USUARIO debe ser reemplazado por el nombre de usuario de Pythonanywhere
        const URL = "https://veronicapersano.pythonanywhere.com/"


        //Vue.createApp para crear nuestra aplicación Vue.
        const app = Vue.createApp({

            //La función data devuelve un objeto que contiene las siguientes propiedades: 
            data() {
                return {
                    codigo: '',
                    modelo: '',
                    cantidad: '',
                    precio: '',

                    imagen1_url: '',
                    imagen1Seleccionada: null,
                    imagen1UrlTemp: null,
                    imagen2_url: '',
                    imagen2Seleccionada: null,
                    imagen2UrlTemp: null,
                    imagen3_url: '',
                    imagen3Seleccionada: null,
                    imagen3UrlTemp: null,
                    descripcion: '',
                    estilo: '',
                    proveedor: '',
                    mostrarDatosProducto: false, //mostrarDatosProducto para controlar la visibilidad del formulario de modificación.
                };
            },

            methods: {
                //Se ejecuta cuando se envía el formulario de consulta. En este método, utilizamos fetch para realizar una solicitud GET a la API y obtener los datos del producto correspondiente al código ingresado.
                obtenerProducto() {
                    fetch(URL + 'productos/' + this.codigo)
                        //Realiza una solicitud de red al servidor para obtener los datos del producto. Usa la URL definida anteriormente y añade 'productos/' seguido del código del producto.

                        //Verificamos si la respuesta de la solicitud es exitosa (código de respuesta 200-299). 
                        .then(response => {
                            //Si es así, utilizamos response.json() para parsear la respuesta en formato JSON.
                            if (response.ok) {
                                return response.json() //Una vez que la respuesta llega del servidor, se convierte de formato JSON a un objeto JavaScript.
                            } else {
                                //Si la respuesta es un error, lanzamos una excepción para ser "catcheada" más adelante en el catch.
                                throw new Error('Error al obtener los datos del producto.')
                            }
                        })

                        //En este bloque, se asignan los datos obtenidos a las variables correspondientes de la aplicación Vue.
                        .then(data => {
                            this.modelo = data.modelo;
                            this.cantidad = data.cantidad;
                            this.precio = data.precio;
                            this.imagen1_url = data.imagen1_url;
                            this.imagen2_url = data.imagen2_url;
                            this.imagen3_url = data.imagen3_url;
                            this.descripcion = data.descripcion;
                            this.estilo = data.estilo;
                            this.proveedor = data.proveedor;
                            this.mostrarDatosProducto = true;
                        })

                        //Si ocurre un error durante la solicitud, se captura y se imprime en la consola.
                        .catch(error => {
                            alert('Código no encontrado.')
                        })
                },

                //Se activa cuando el usuario selecciona una imagen para cargar.
                seleccionarImagen1(event) {
                    const file = event.target.files[0];
                    this.imagen1Seleccionada = file;
                    this.imagen1UrlTemp = URL.createObjectURL(file); // Crea una URL temporal para la vista previa
                },

                seleccionarImagen2(event) {
                    const file = event.target.files[0];
                    this.imagen2Seleccionada = file;
                    this.imagen2UrlTemp = URL.createObjectURL(file); // Crea una URL temporal para la vista previa
                },

                seleccionarImagen3(event) {
                    const file = event.target.files[0];
                    this.imagen3Seleccionada = file;
                    this.imagen3UrlTemp = URL.createObjectURL(file); // Crea una URL temporal para la vista previa
                },

                //Se usa para enviar los datos modificados del producto al servidor.
                guardarCambios() {
                    const formData = new FormData();
                    formData.append('codigo', this.codigo);
                    formData.append('modelo', this.modelo);
                    formData.append('cantidad', this.cantidad);
                    formData.append('precio', this.precio);
                    formData.append('descripcion', this.descripcion);
                    formData.append('estilo', this.estilo);
                    formData.append('proveedor', this.proveedor);
                    

                    //Si se ha seleccionado una imagen nueva, la añade al formData. 
                    if (this.imagen1Seleccionada) {
                        formData.append('imagen1', this.imagen1Seleccionada, this.imagen1Seleccionada.name);
                    }

                    if (this.imagen2Seleccionada) {
                        formData.append('imagen2', this.imagen2Seleccionada, this.imagen2Seleccionada.name);
                    }

                    if (this.imagen3Seleccionada) {
                        formData.append('imagen3', this.imagen3Seleccionada, this.imagen3Seleccionada.name);
                    }


                    //Utilizamos fetch para realizar una solicitud PUT a la API y guardar los cambios.
                    fetch(URL + 'productos/' + this.codigo, {
                        method: 'PUT',
                        body: formData, //Dado que formData puede contener archivos, no se utiliza JSON.
                    })
                        .then(response => {
                            //Si la respuesta es exitosa, utilizamos response.json() para parsear la respuesta en formato JSON.
                            if (response.ok) {
                                return response.json()
                            } else {
                                //Si la respuesta es un error, lanzamos una excepción.
                                throw new Error('Error al guardar los cambios del producto.')
                            }
                        })

                        //Respuesta OK, muestra una alerta informando que el producto se agregó correctamente y limpia los campos del formulario para que puedan ser utilizados para un nuevo producto.
                        .then(data => {
                            alert('Producto actualizado correctamente.');
                            this.limpiarFormulario();
                        })

                        // En caso de error, mostramos una alerta con un mensaje de error.
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Error al actualizar el producto.');
                        });
                },

                //Restablece todas las variables relacionadas con el formulario a sus valores iniciales, lo que efectivamente "limpia" el formulario.
                limpiarFormulario() {
                    this.codigo = '';
                    this.modelo = '';
                    this.cantidad = '';
                    this.precio = '';
                    this.imagen1_url = '';
                    this.imagen1Seleccionada = null;
                    this.imagen1UrlTemp = null;
                    this.imagen2_url = '';
                    this.imagen2Seleccionada = null;
                    this.imagen2UrlTemp = null;
                    this.imagen3_url = '';
                    this.imagen3Seleccionada = null;
                    this.imagen3UrlTemp = null;
                    this.estilo = '';
                    this.proveedor = '';
                    this.mostrarDatosProducto = false;
                }
            }
        });

        //Cuando se llama a app.mount('#app'), Vue busca en el documento HTML un elemento con el id app. Vue entonces toma el control de este elemento y de todo su contenido. Esto significa que Vue puede reaccionar a los cambios en sus datos y actualizar automáticamente el HTML en este elemento. También maneja eventos, como clicks o entradas de formulario, y actualiza los datos según las interacciones del usuario.

        app.mount('#app');
    </script>

</body>

</html>